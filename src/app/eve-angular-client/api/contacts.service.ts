/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

// import { Observable }                                        from 'rxjs/Observable';
import { Observable } from 'rxjs';

import { BadRequest } from '../model/badRequest';
import { ErrorLimited } from '../model/errorLimited';
import { Forbidden } from '../model/forbidden';
import { GatewayTimeout } from '../model/gatewayTimeout';
import { GetAlliancesAllianceIdContacts200Ok } from '../model/getAlliancesAllianceIdContacts200Ok';
import { GetAlliancesAllianceIdContactsLabels200Ok } from '../model/getAlliancesAllianceIdContactsLabels200Ok';
import { GetCharactersCharacterIdContacts200Ok } from '../model/getCharactersCharacterIdContacts200Ok';
import { GetCharactersCharacterIdContactsLabels200Ok } from '../model/getCharactersCharacterIdContactsLabels200Ok';
import { GetCorporationsCorporationIdContacts200Ok } from '../model/getCorporationsCorporationIdContacts200Ok';
import { GetCorporationsCorporationIdContactsLabels200Ok } from '../model/getCorporationsCorporationIdContactsLabels200Ok';
import { InternalServerError } from '../model/internalServerError';
import { PostCharactersCharacterIdContactsError520 } from '../model/postCharactersCharacterIdContactsError520';
import { ServiceUnavailable } from '../model/serviceUnavailable';
import { Unauthorized } from '../model/unauthorized';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ContactsService {

    protected basePath = 'https://esi.evetech.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete contacts
     * Bulk delete contacts  --- 
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts to delete
     * @param datasource The server name you would like data from
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, datasource?: string, token?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, datasource?: string, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, datasource?: string, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, datasource?: string, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling deleteCharactersCharacterIdContacts.');
        }
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling deleteCharactersCharacterIdContacts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (contactIds) {
            contactIds.forEach((element) => {
                queryParameters = queryParameters.append('contact_ids', <any>element);
            })
        }
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/v2/characters/${encodeURIComponent(String(characterId))}/contacts/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get alliance contacts
     * Return contacts of an alliance  ---  This route is cached for up to 300 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param ifNoneMatch ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAlliancesAllianceIdContacts(allianceId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetAlliancesAllianceIdContacts200Ok>>;
    public getAlliancesAllianceIdContacts(allianceId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetAlliancesAllianceIdContacts200Ok>>>;
    public getAlliancesAllianceIdContacts(allianceId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetAlliancesAllianceIdContacts200Ok>>>;
    public getAlliancesAllianceIdContacts(allianceId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceIdContacts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;
        if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
            headers = headers.set('If-None-Match', String(ifNoneMatch));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GetAlliancesAllianceIdContacts200Ok>>(`${this.basePath}/v2/alliances/${encodeURIComponent(String(allianceId))}/contacts/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get alliance contact labels
     * Return custom labels for an alliance&#39;s contacts  ---  This route is cached for up to 300 seconds
     * @param allianceId An EVE alliance ID
     * @param datasource The server name you would like data from
     * @param ifNoneMatch ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAlliancesAllianceIdContactsLabels(allianceId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetAlliancesAllianceIdContactsLabels200Ok>>;
    public getAlliancesAllianceIdContactsLabels(allianceId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetAlliancesAllianceIdContactsLabels200Ok>>>;
    public getAlliancesAllianceIdContactsLabels(allianceId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetAlliancesAllianceIdContactsLabels200Ok>>>;
    public getAlliancesAllianceIdContactsLabels(allianceId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (allianceId === null || allianceId === undefined) {
            throw new Error('Required parameter allianceId was null or undefined when calling getAlliancesAllianceIdContactsLabels.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;
        if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
            headers = headers.set('If-None-Match', String(ifNoneMatch));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GetAlliancesAllianceIdContactsLabels200Ok>>(`${this.basePath}/v1/alliances/${encodeURIComponent(String(allianceId))}/contacts/labels/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get contacts
     * Return contacts of a character  ---  This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param ifNoneMatch ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCharactersCharacterIdContacts(characterId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetCharactersCharacterIdContacts200Ok>>;
    public getCharactersCharacterIdContacts(characterId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetCharactersCharacterIdContacts200Ok>>>;
    public getCharactersCharacterIdContacts(characterId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetCharactersCharacterIdContacts200Ok>>>;
    public getCharactersCharacterIdContacts(characterId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContacts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;
        if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
            headers = headers.set('If-None-Match', String(ifNoneMatch));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GetCharactersCharacterIdContacts200Ok>>(`${this.basePath}/v2/characters/${encodeURIComponent(String(characterId))}/contacts/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get contact labels
     * Return custom labels for a character&#39;s contacts  ---  This route is cached for up to 300 seconds
     * @param characterId An EVE character ID
     * @param datasource The server name you would like data from
     * @param ifNoneMatch ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCharactersCharacterIdContactsLabels(characterId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetCharactersCharacterIdContactsLabels200Ok>>;
    public getCharactersCharacterIdContactsLabels(characterId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetCharactersCharacterIdContactsLabels200Ok>>>;
    public getCharactersCharacterIdContactsLabels(characterId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetCharactersCharacterIdContactsLabels200Ok>>>;
    public getCharactersCharacterIdContactsLabels(characterId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling getCharactersCharacterIdContactsLabels.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;
        if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
            headers = headers.set('If-None-Match', String(ifNoneMatch));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GetCharactersCharacterIdContactsLabels200Ok>>(`${this.basePath}/v1/characters/${encodeURIComponent(String(characterId))}/contacts/labels/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get corporation contacts
     * Return contacts of a corporation  ---  This route is cached for up to 300 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param ifNoneMatch ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param page Which page of results to return
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCorporationsCorporationIdContacts(corporationId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetCorporationsCorporationIdContacts200Ok>>;
    public getCorporationsCorporationIdContacts(corporationId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetCorporationsCorporationIdContacts200Ok>>>;
    public getCorporationsCorporationIdContacts(corporationId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetCorporationsCorporationIdContacts200Ok>>>;
    public getCorporationsCorporationIdContacts(corporationId: number, datasource?: string, ifNoneMatch?: string, page?: number, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdContacts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;
        if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
            headers = headers.set('If-None-Match', String(ifNoneMatch));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GetCorporationsCorporationIdContacts200Ok>>(`${this.basePath}/v2/corporations/${encodeURIComponent(String(corporationId))}/contacts/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get corporation contact labels
     * Return custom labels for a corporation&#39;s contacts  ---  This route is cached for up to 300 seconds
     * @param corporationId An EVE corporation ID
     * @param datasource The server name you would like data from
     * @param ifNoneMatch ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCorporationsCorporationIdContactsLabels(corporationId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<GetCorporationsCorporationIdContactsLabels200Ok>>;
    public getCorporationsCorporationIdContactsLabels(corporationId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetCorporationsCorporationIdContactsLabels200Ok>>>;
    public getCorporationsCorporationIdContactsLabels(corporationId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetCorporationsCorporationIdContactsLabels200Ok>>>;
    public getCorporationsCorporationIdContactsLabels(corporationId: number, datasource?: string, ifNoneMatch?: string, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (corporationId === null || corporationId === undefined) {
            throw new Error('Required parameter corporationId was null or undefined when calling getCorporationsCorporationIdContactsLabels.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;
        if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
            headers = headers.set('If-None-Match', String(ifNoneMatch));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<GetCorporationsCorporationIdContactsLabels200Ok>>(`${this.basePath}/v1/corporations/${encodeURIComponent(String(corporationId))}/contacts/labels/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add contacts
     * Bulk add contacts with same settings  --- 
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts
     * @param standing Standing for the contact
     * @param datasource The server name you would like data from
     * @param labelIds Add custom labels to the new contact
     * @param token Access token to use if unable to set a header
     * @param watched Whether the contact should be watched, note this is only effective on characters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<number>>;
    public postCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<number>>>;
    public postCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<number>>>;
    public postCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling postCharactersCharacterIdContacts.');
        }
        if (standing === null || standing === undefined) {
            throw new Error('Required parameter standing was null or undefined when calling postCharactersCharacterIdContacts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (labelIds) {
            labelIds.forEach((element) => {
                queryParameters = queryParameters.append('label_ids', <any>element);
            })
        }
        if (standing !== undefined) {
            queryParameters = queryParameters.set('standing', <any>standing);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (watched !== undefined) {
            queryParameters = queryParameters.set('watched', <any>watched);
        }

        let headers = this.defaultHeaders;

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<number>>(`${this.basePath}/v2/characters/${encodeURIComponent(String(characterId))}/contacts/`,
            contactIds,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edit contacts
     * Bulk edit contacts with same settings  --- 
     * @param characterId An EVE character ID
     * @param contactIds A list of contacts
     * @param standing Standing for the contact
     * @param datasource The server name you would like data from
     * @param labelIds Add custom labels to the contact
     * @param token Access token to use if unable to set a header
     * @param watched Whether the contact should be watched, note this is only effective on characters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putCharactersCharacterIdContacts(characterId: number, contactIds: Array<number>, standing: number, datasource?: string, labelIds?: Array<number>, token?: string, watched?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (characterId === null || characterId === undefined) {
            throw new Error('Required parameter characterId was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        if (contactIds === null || contactIds === undefined) {
            throw new Error('Required parameter contactIds was null or undefined when calling putCharactersCharacterIdContacts.');
        }
        if (standing === null || standing === undefined) {
            throw new Error('Required parameter standing was null or undefined when calling putCharactersCharacterIdContacts.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (datasource !== undefined) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (labelIds) {
            labelIds.forEach((element) => {
                queryParameters = queryParameters.append('label_ids', <any>element);
            })
        }
        if (standing !== undefined) {
            queryParameters = queryParameters.set('standing', <any>standing);
        }
        if (token !== undefined) {
            queryParameters = queryParameters.set('token', <any>token);
        }
        if (watched !== undefined) {
            queryParameters = queryParameters.set('watched', <any>watched);
        }

        let headers = this.defaultHeaders;

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/v2/characters/${encodeURIComponent(String(characterId))}/contacts/`,
            contactIds,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
